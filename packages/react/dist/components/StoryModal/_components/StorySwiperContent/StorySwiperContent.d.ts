import React from 'react';
import { LongPressTouchHandlers } from 'use-long-press';
import { GroupType, StoryType } from '@types';
import JSConfetti from 'js-confetti';
import { SwipeOutput } from '@hooks';
import '../../StoryModal.scss';
interface StorySwiperContentProps {
    isMobile: boolean;
    isLarge: boolean;
    isAutoplayVideos: boolean;
    isShowMockupCurrent?: boolean;
    isGroupWithFilledBackground?: boolean;
    isProgressHidden?: boolean;
    isBackroundFilled?: boolean;
    currentGroupType: GroupType;
    currentGroup: any;
    currentStory: number;
    isOpened: boolean;
    isMediaLoading: boolean;
    isLoading?: boolean;
    activeStoriesWithResult: StoryType[];
    height: number;
    currentStorySize: any;
    heightGap: number;
    contentWidth: number | string;
    contentHeight: number | string;
    forbidClose?: boolean;
    isStatusBarActive?: boolean;
    storyWidth?: number;
    storyHeight?: number;
    isForceCloseAvailable?: boolean;
    playStatus: string;
    jsConfetti: React.MutableRefObject<JSConfetti>;
    loadedStoriesIds: {
        [key: string]: boolean;
    };
    handleClose: () => void;
    handleLoadStory: (storyId: string) => void;
    handleAnimationEnd: () => void;
    handleMediaLoading: (isMediaLoading: boolean) => void;
    handleVideoPlaying: (isPlaying: boolean) => void;
    handleVideoBackgroundPlaying: (isPlaying: boolean) => void;
    handleGoToStory: (storyId: string) => void;
    pressHandlers?: () => LongPressTouchHandlers<Element>;
    swipeHandlers: SwipeOutput;
}
export declare const StorySwiperContent: React.FC<StorySwiperContentProps>;
export {};
